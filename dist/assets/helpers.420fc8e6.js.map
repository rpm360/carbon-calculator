{"version":3,"file":"helpers.420fc8e6.js","sources":["../../src/utils/helpers.ts"],"sourcesContent":["import { ActivityType, CarbonActivity } from '../context/CarbonDataContext';\n\n// Generate a simple unique ID\nexport const generateId = (): string => {\n  return Math.random().toString(36).substring(2, 15) + \n         Math.random().toString(36).substring(2, 15);\n};\n\n// Carbon emission factors for different activity types (kg CO2e)\nexport const carbonFactors: Record<ActivityType, number> = {\n  driving: 0.2, // kg CO2e per km\n  ai_usage: 0.1, // kg CO2e per hour\n  commute: 0.15, // kg CO2e per km\n  phone: 0.05, // kg CO2e per hour\n  electricity: 0.5, // kg CO2e per kWh\n  food: 2.5 // kg CO2e per kg of meat\n};\n\n// Units for each activity type\nexport const activityUnits: Record<ActivityType, string> = {\n  driving: 'km',\n  ai_usage: 'hours',\n  commute: 'km',\n  phone: 'hours',\n  electricity: 'kWh',\n  food: 'kg'\n};\n\n// Calculate total emissions from activities\nexport const calculateTotalEmissions = (activities: CarbonActivity[]): number => {\n  return activities.reduce((total, activity) => {\n    return total + (activity.value * carbonFactors[activity.type as ActivityType]);\n  }, 0);\n};\n\n// Get a human-readable label for activity types\nexport const getActivityTypeLabel = (type: ActivityType): string => {\n  switch(type) {\n    case 'driving': return 'Car Driving';\n    case 'ai_usage': return 'AI Tool Usage';\n    case 'commute': return 'Public Transportation';\n    case 'phone': return 'Phone/Device Usage';\n    case 'electricity': return 'Electricity Consumption';\n    case 'food': return 'Food (Meat) Consumption';\n    default: return type;\n  }\n};\n\n// Generate city average carbon emissions (simulated data)\nexport const getCityAverage = (city: string): number => {\n  // In a real app, this would come from a database or API\n  const cityAverages: Record<string, number> = {\n    'New York': 15.2,\n    'Los Angeles': 18.5,\n    'Chicago': 16.8,\n    'Houston': 21.3,\n    'Phoenix': 19.7,\n    'Philadelphia': 14.9,\n    'San Antonio': 20.1,\n    'San Diego': 17.3,\n    'Dallas': 20.5,\n    'San Jose': 16.2\n  };\n  \n  // Return the city average if it exists, otherwise return a default value\n  return cityAverages[city] || 18.0;\n};\n\n// Generate personalized recommendations based on activities\nexport const generateRecommendations = (activities: CarbonActivity[]): Array<{title: string, description: string, impact: number}> => {\n  const recommendations = [];\n  \n  // Group activities by type\n  const activityByType: Record<ActivityType, number> = {\n    driving: 0,\n    ai_usage: 0,\n    commute: 0,\n    phone: 0,\n    electricity: 0,\n    food: 0\n  };\n  \n  activities.forEach(activity => {\n    activityByType[activity.type as ActivityType] += activity.value;\n  });\n  \n  // Generate recommendations based on activity levels\n  if (activityByType.driving > 30) {\n    recommendations.push({\n      title: 'Reduce Car Usage',\n      description: 'Consider carpooling, using public transport, or cycling for short distances.',\n      impact: activityByType.driving * 0.1 * carbonFactors.driving\n    });\n  }\n  \n  if (activityByType.ai_usage > 3) {\n    recommendations.push({\n      title: 'Optimize AI Usage',\n      description: 'Batch your AI tasks and be more specific with prompts to reduce processing time.',\n      impact: activityByType.ai_usage * 0.2 * carbonFactors.ai_usage\n    });\n  }\n  \n  if (activityByType.electricity > 10) {\n    recommendations.push({\n      title: 'Reduce Energy Consumption',\n      description: 'Turn off lights and unplug devices when not in use. Consider energy-efficient appliances.',\n      impact: activityByType.electricity * 0.15 * carbonFactors.electricity\n    });\n  }\n  \n  if (activityByType.food > 0.5) {\n    recommendations.push({\n      title: 'Reduce Meat Consumption',\n      description: 'Try incorporating more plant-based meals into your diet.',\n      impact: activityByType.food * 0.3 * carbonFactors.food\n    });\n  }\n  \n  // Add a general recommendation if we have few specific ones\n  if (recommendations.length < 2) {\n    recommendations.push({\n      title: 'Track More Activities',\n      description: 'Add more of your daily activities to get personalized recommendations.',\n      impact: 1.5\n    });\n  }\n  \n  return recommendations;\n};\n"],"names":["generateId","carbonFactors","activityUnits","getActivityTypeLabel","type","generateRecommendations","activities","recommendations","activityByType","activity"],"mappings":"AAGO,MAAMA,EAAa,IACjB,KAAK,SAAS,SAAS,EAAE,EAAE,UAAU,EAAG,EAAE,EAC1C,KAAK,OAAS,EAAA,SAAS,EAAE,EAAE,UAAU,EAAG,EAAE,EAItCC,EAA8C,CACzD,QAAS,GACT,SAAU,GACV,QAAS,IACT,MAAO,IACP,YAAa,GACb,KAAM,GACR,EAGaC,EAA8C,CACzD,QAAS,KACT,SAAU,QACV,QAAS,KACT,MAAO,QACP,YAAa,MACb,KAAM,IACR,EAUaC,EAAwBC,GAA+B,CAC3D,OAAAA,OACA,UAAkB,MAAA,kBAClB,WAAmB,MAAA,oBACnB,UAAkB,MAAA,4BAClB,QAAgB,MAAA,yBAChB,cAAsB,MAAA,8BACtB,OAAe,MAAA,kCACJ,OAAAA,EAEpB,EAuBaC,EAA2BC,GAA8F,CACpI,MAAMC,EAAkB,CAAA,EAGlBC,EAA+C,CACnD,QAAS,EACT,SAAU,EACV,QAAS,EACT,MAAO,EACP,YAAa,EACb,KAAM,CAAA,EAGR,OAAAF,EAAW,QAAoBG,GAAA,CACdD,EAAAC,EAAS,OAAyBA,EAAS,KAAA,CAC3D,EAGGD,EAAe,QAAU,IAC3BD,EAAgB,KAAK,CACnB,MAAO,mBACP,YAAa,+EACb,OAAQC,EAAe,QAAU,GAAMP,EAAc,OAAA,CACtD,EAGCO,EAAe,SAAW,GAC5BD,EAAgB,KAAK,CACnB,MAAO,oBACP,YAAa,mFACb,OAAQC,EAAe,SAAW,GAAMP,EAAc,QAAA,CACvD,EAGCO,EAAe,YAAc,IAC/BD,EAAgB,KAAK,CACnB,MAAO,4BACP,YAAa,4FACb,OAAQC,EAAe,YAAc,IAAOP,EAAc,WAAA,CAC3D,EAGCO,EAAe,KAAO,IACxBD,EAAgB,KAAK,CACnB,MAAO,0BACP,YAAa,2DACb,OAAQC,EAAe,KAAO,GAAMP,EAAc,IAAA,CACnD,EAICM,EAAgB,OAAS,GAC3BA,EAAgB,KAAK,CACnB,MAAO,wBACP,YAAa,yEACb,OAAQ,GAAA,CACT,EAGIA,CACT"}